package com.kbh.kotlinstudy.`object`

/**
 * 생성자 없이 객체를 만드는 키워드 'object' 를 학습한다
 * 클래스와의 차이점은 여러개의 인스턴스가 아닌 공통적인 속성과 함수를 사용해야하는 경우 사용한다.
 * 일종의 싱글톤 패턴을 언어차원에서 지원하는 것이다.
 *
 * 남용되면 테스트 및 모듈성에 부정적인 영향을 줄 수 있으므로 적절한 상황에서 사용하는 것이 중요하다.
 *
 * 자바에서 AtomicXXXX 시리즈의 자료형도 멀티쓰레드 환경에서 공통적으로 사용해서
 * 비슷한 의미로도 볼 수 있다고 오해할 수 있으나 다른 목적과 기능으로 사용되니 착각하면 안된다.
 *
 * AtomicXXXX 시리즈는 스레드 안전한 원자적 연산을 제공하는 클래스이며
 * 예를들어 AtomicInteger는 하나의 정수를 저장하고 해당 정수에 대한 원자적 연산을 수행할 수 있다.
 * 이는 멀티스레드 환경에서 여러 스레드가 동시에 AtomicInteger의 값을 읽고 쓸 때
 * 데이터 무결성과 일관성을 보장하기 위해 사용됩니다.
 *
 * AtomicInteger는 여러 스레드가 동시에 해당 값을 변경하려고 할 때 원자적 연산을 사용하여 경쟁 조건을 방지합니다.
 * 예를 들어, getAndIncrement() 메서드는 값을 읽고 1을 증가시키는 연산을 원자적으로 수행합니다.
 * 따라서 다중 스레드 환경에서도 안전하게 사용할 수 있습니다.
 *
 * 결론적으로 속성과 함수를 사용하는경우 object가 사용되고
 * thread safe한 연산을 해야하는경우 atomicXXX 시리즈가 사용되기 때문에 둘은 전혀 연관이 없다.
 * */
class KotlinObject {
}