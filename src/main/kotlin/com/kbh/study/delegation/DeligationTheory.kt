package com.kbh.study.delegation

/**
 * 상속과 델리게이션의 비교
 *
 * 두 가지 방법 모두 객체지향 프로그래밍에서 확장을 하기위한 디자인 방식이나, 언어적인 차원에서 제한되는 경우와 지원되는 경우가 존재한다.
 *
 * 상속은 베이스 클래스로부터 모든 구성요소를 가져올 수 있지만 종속적으로 변해버리고 타 베이스 클래스를 선택할 수 없다.
 * 델리게이션은 유연하고 자신이 처리해야할 일을 다른 인스턴스에게 위임할 수 있다.
 *
 * 각종 디자인패턴, 이펙티브 자바에서 상속보다 델리게이션을 추천한다. 그러나 델리게이션으로 구성하게 되면 자바는 언어적인 차원에서 지원하지 않기때문에
 * 적지 않은 비용과 여러 부수적인 중복된 요소가 탄생하고 이를 관리하기 어렵다.
 *
 * 코틀린에서 델리게이션을 빌트인하여 언어적인 차원에서 공유한다. 그러므로 왜 델리게이션을 학습해야하는지 다시 상기시키고 빌트인 델리게이션을 사용하고자 한다.
 *
 * 상속이 꼭 나쁘다는 것은 아니지만 다음과 같은경우를 선택하여 언어적인 차원에서 쉽게 디자인 패턴을 코틀린에서 이용할 수 있다.
 *
 * 클래스의 객체가 다른 클래스의 객체가 들어갈 자리에 쓰여야한다면 상속을 사용한다.
 * 클래스의 객체가 다른 클래스의 객체를 사용하기만 해도 된다면 델리게이션을 활용한다.
 *
 *
 * */